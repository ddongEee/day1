version: '3.8'
services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - "${PROMETHEUS_VOLUME:-./build-src/system-monitoring/prometheus}:/etc/prometheus"
  grafana:
    depends_on:
      - prometheus
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - "${GRAFANA_VOLUME:-./build-src/system-monitoring/grafana/datasources}:/etc/grafana/provisioning/datasources"
    restart: unless-stopped

  day1:
    image: day1:local
    container_name: day1
    ports:
      - "${DAY1_APP_PORT:-28081}:${DAY1_APP_PORT:-28081}"
    build:
      context: .
      dockerfile: Dockerfile.app.build
      args:
        APP_NAME: day1
    environment:
      SERVER_PORT: ${DAY1_APP_PORT:-28081}
      DB_HOST: db
      JAVA_OPTS: |
        -Dserver.port=${DAY1_APP_PORT:-28081}

  e2e:
    image: day1_e2e:local
    container_name: e2e-bdd-rest
    build:
      context: build-src/system-behavior
      dockerfile: Dockerfile-Cucumber
    environment:
      SYSTEM_NAME: Day1
      SYSTEM_PROTOCOL: http
      SYSTEM_HOST: day1
      SYSTEM_PORT: ${DAY1_APP_PORT:-28081}
      SYSTEM_VERSION: ${APP_VERS:-SNAPSHOT}
      SYSTEM_RUNTIME: dockerd
    command: ["sh", "-c", "cd /system-behavior && yarn run test"]
    volumes:
      - ./build-src/system-behavior/outputs/mounts/basic:/system-behavior/outputs/basic

  e2e-report:
    extends:
      service: e2e
    command: ["sh", "-c", "cd /system-behavior && yarn run report"]
    volumes:
      - ./build-src/system-behavior/outputs/mounts/basic:/system-behavior/outputs/basic
      - ./build-src/system-behavior/outputs/mounts/report:/system-behavior/outputs/report

  db:
    image: day1_db:local
    container_name: db
    build:
      context: build-src/system-persistence/db
      dockerfile: Dockerfile-PostgreSQL
    ports:
      - "${DB_PORT:-5432}:5432"
    environment:
      TZ: Asia/Seoul
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres1234}
      POSTGRES_INITDB_ARGS: --encoding=UTF-8
    restart: unless-stopped
    volumes:
      - ${DB_VOLUME:-./build-src/system-persistence/db/mount}:/var/lib/postgresql/data

  mig-db-schema:
    depends_on:
      - db
    image: day1_mig:dev-schema
    container_name: mig-db-schema
    build:
      context: build-src/system-persistence/db
      dockerfile: Dockerfile-FlyWay
      args:
        MIG_SCOPE: sql/ddl-schema
    command: |
      -url=jdbc:postgresql://db:${DB_PORT:-5432}/${DB_DATABASE_NAME:-day1}
      -defaultSchema=public
      -schemas=${DB_DEFAULT_SCHEMA:-builder}
      -user=${DB_USERNAME:-postgres}
      -password=${DB_PASSWORD:-postgres1234}
      -connectRetries=60
      clean migrate info

  mig-db-dataset:
    depends_on:
      - db
      - mig-db-schema
    image: day1_mig:dev-dataset
    container_name: mig-db-dataset
    build:
      context: build-src/system-persistence/db
      dockerfile: Dockerfile-FlyWay
      args:
        MIG_SCOPE: sql/dml-dataset
    command: |
      -url=jdbc:postgresql://db:${DB_PORT:-5432}/${DB_DATABASE_NAME:-day1}
      -defaultSchema=public
      -schemas=${DB_DEFAULT_SCHEMA:-builder}
      -user=${DB_USERNAME:-postgres}
      -password=${DB_PASSWORD:-postgres1234}
      -connectRetries=60
      -outOfOrder=true
      -ignorePendingMigrations=true
      -ignoreIgnoredMigrations=true
      repair info migrate info

volumes:
  db-data:
    external: true
