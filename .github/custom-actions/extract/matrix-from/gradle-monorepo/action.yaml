name: "Extract Matrix for Gradle Project (for monorepo)"
description: "Extract matrix (part of 'project') from Gradle Project"

inputs:
  build-gradle-file-name:
    description: "The package management file (default: build.gradle)"
    required: false
    default: "build.gradle"
  common-includes:
    description: "The files or folders (delimiter: ',') are included commonly to check all (basic include: .github/workflows/ & .github/custom-actions/)"
    required: true
    default: "gradle.properties, *.gradle, Dockerfile.app.build"
  common-ignores:
    description: "The files or folders (delimiter: ',') are ignored on all check step (basic include: gradle-ci.properties)"
    required: true
  target-projects:
    description: "The gradle sub-projects names (delimiter: ',') can build a runnable package as interface layer (or port layer)"
    required: true
    default: "student, teacher"
  working-directory:
    description: "Where the package management file 'build.gradle' exist"
    required: false
    default: "."

outputs:
  # at 'diff' step
  HAS_DIFF_PROJECTS:
    description: "The flag that matrix exist on job - 'true' is only set when the 'PROJECTS' output exist - ex. 'true'"
    value: ${{ steps.diff.outputs.HAS_DIFF_PROJECTS }}
  PROJECTS:
    description: "The git diff exist command checked with dependencies - ex. 'student, teacher' "
    value: ${{ steps.diff.outputs.DIFF_EXIST_PROJECTS }}
  # at 'trim' step
  TRIMMED_PROJECTS:
    description: "The git diff exist command checked with dependencies - ex. 'student teacher' "
    value: ${{ steps.trim.outputs.TRIMMED_PROJECTS }}
  # at 'matrix' step
  MATRIX_PROJECT:
    description: "Ths jsonString format consist of 'PROJECTS' output for matrix - ex. '{\"project\":[\"student\",\"teacher\"]}'"
    value: ${{ steps.matrix.outputs.MATRIX_PROJECT }}

runs:
  using: composite
  steps:
    - name: üèÉ [EXTRACT/MATRIX] Check inputs
      shell: bash
      run: |
        cat <<EOF
        üîé build-gradle-file-name : ${{ inputs.build-gradle-file-name }}
        üîé common-includes        : ${{ inputs.common-includes }}
        üîé target-projects        : ${{ inputs.target-projects }}
        üîé working-directory      : ${{ inputs.working-directory }}
        EOF

    - name: üèÉ [EXTRACT/MATRIX] Trim target-projects & common-includes
      id: trim
      shell: bash
      run: |
        TRIMMED_PROJECTS=$(echo "${{ inputs.target-projects }}" | sed -e 's/, $//g' | sed -e 's/,/ /g')
        TRIMMED_PROJECTS=$(echo "${TRIMMED_PROJECTS}" | sed -e 's/\[//g' -e 's/\]//g')
        echo "üîé TRIMMED_PROJECTS: ${TRIMMED_PROJECTS}"
        echo "::set-output name=TRIMMED_PROJECTS::${TRIMMED_PROJECTS}"

        TRIMMED_INCLUDES="${{ inputs.common-includes }}"
        TRIMMED_INCLUDES="${TRIMMED_INCLUDES}, .github/workflows/"
        TRIMMED_INCLUDES="${TRIMMED_INCLUDES}, .github/custom-actions/"
        TRIMMED_INCLUDES=$(echo "${TRIMMED_INCLUDES}" | sed -e 's/\[//g' -e 's/\]//g')
        TRIMMED_INCLUDES=$(echo "${TRIMMED_INCLUDES}" | sed -e 's/, $//g' | sed -e 's/,/ /g')
        echo "üîé TRIMMED_INCLUDES: ${TRIMMED_INCLUDES}"
        echo "::set-output name=TRIMMED_INCLUDES::${TRIMMED_INCLUDES}"

        TRIMMED_IGNORES="${{ inputs.common-ignores }}"
        TRIMMED_IGNORES="${TRIMMED_IGNORES}, gradle-ci.properties"
        TRIMMED_IGNORES=$(echo "${TRIMMED_IGNORES}" | sed -e 's/\[//g' -e 's/\]//g')
        TRIMMED_IGNORES=$(echo "${TRIMMED_IGNORES}" | sed -e 's/, / \:\!/g')
        echo "üîé TRIMMED_IGNORES: ${TRIMMED_IGNORES}"
        echo "::set-output name=TRIMMED_IGNORES::${TRIMMED_IGNORES}"

    - name: üèÉ [EXTRACT/MATRIX] Check diff based on build-gradle-file('${{ inputs.build-gradle-file-name }}') per project
      id: diff
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        for project in ${{ steps.trim.outputs.TRIMMED_PROJECTS }}; do

            depend_on=$(cat ${project}/${{ inputs.build-gradle-file-name }} | grep "project" | awk -F'"' '{print $2}' | sed -e 's/\://g' | tr '\n' ' ')
            diff_check_target="${project} ${depend_on} ${{ steps.trim.outputs.TRIMMED_INCLUDES }} ${{ steps.trim.outputs.TRIMMED_IGNORES }}"

            cat <<EOF
        ===================================
        üîé [ Monorepo Git Diff Checklist ]
        -----------------------------------
        > project   : ${project}
        > depend_on : ${depend_on}
        > diff_check_target: ${diff_check_target}
        -----------------------------------
        EOF

            diff_count=$(git diff HEAD^ -- ${diff_check_target} | wc -l | tr -d ' ')
            echo "üîé In-progress > diff_count: '${diff_count}'"
            if [[ ${diff_count} > 0 ]]; then
                DIFF_EXIST_PROJECTS="${DIFF_EXIST_PROJECTS}, ${project}"
                echo "> '${project}' has some diff from previous commit"
                echo "> DIFF_EXIST_PROJECTS: ${DIFF_EXIST_PROJECTS}" && echo ""
                continue
            fi
            echo "üîé > '${project}' has no diff from previous commit (Skip to mark)"
            echo "üîé > DIFF_EXIST_PROJECTS: ${DIFF_EXIST_PROJECTS}" && echo ""
        done

        DIFF_EXIST_PROJECTS=$(echo ${DIFF_EXIST_PROJECTS} | tr -d ' ' | sed -e 's/,/ /g' -e 's/^ //g')
        cat <<EOF
        ======================================================================
        üîé [RESULT] DIFF_EXIST_PROJECTS: ${DIFF_EXIST_PROJECTS}
        ======================================================================
        EOF

        [[ ${DIFF_EXIST_PROJECTS} ]] && {
            echo "::set-output name=HAS_DIFF_PROJECTS::true"
            echo "::set-output name=DIFF_EXIST_PROJECTS::${DIFF_EXIST_PROJECTS}"
            exit 0
        }
        echo "::set-output name=DIFF_EXIST_PROJECTS::[\"no_module-to_avoid_syntax_error\"]"

    - if: ${{ steps.diff.outputs.HAS_DIFF_PROJECTS }}
      name: üèÉ [EXTRACT/MATRIX] 
      id: matrix
      shell: bash
      run: |
        MATRIX_PROJECT="{\"project\": []}"
        MATRIX_PROJECT=$(echo ${MATRIX_PROJECT} | jq -r)

        echo "üîé Init....... > MATRIX_PROJECT: ${MATRIX_PROJECT}"
        for project in ${{ steps.diff.outputs.DIFF_EXIST_PROJECTS }}; do
            MATRIX_PROJECT=$(echo ${MATRIX_PROJECT} | jq  -r ".project += [\"${project}\"]")
            echo "üîé In-progress > MATRIX_PROJECT: ${MATRIX_PROJECT}"
        done

        MATRIX_PROJECT=$(echo "${MATRIX_PROJECT}" | tr -d '\n' | tr -d '  ')
        echo "üîé [Convert-jsonString] (1/2) Shortten > MATRIX_PROJECT: MATRIX_PROJECT: ${MATRIX_PROJECT}"
        echo "üîé [Convert-jsonString] (2/2) Check JQ > MATRIX_PROJECT: $(echo ${MATRIX_PROJECT} | jq '.')"
        echo "::set-output name=MATRIX_PROJECT::$MATRIX_PROJECT"
