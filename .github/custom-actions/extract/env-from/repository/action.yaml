name: "Extract from Repository"
description: "Extract variables from repository"

inputs:
  working-directory:
    description: "Where the git repository is located"
    required: false
    default: "."

outputs:
  # app
  APP_NAME:
    description: "Application name (extracted from 'setting.gradle.kts')"
    value: ${{ steps.app-name.outputs.APP_NAME }}
  APP_VERS:
    description: "Application version (extracted from 'build.gradle.kts')"
    value: ${{ steps.app-vers.outputs.APP_VERS }}
  # git
  GIT_BRANCH_SHA:
    description: "Current commit hash value"
    value: ${{ steps.git-branch_sha.outputs.GIT_BRANCH_SHA }}
  GIT_BRANCH:
    description: "Current branch name (extracted based on prefix)"
    value: ${{ steps.git-branch.outputs.GIT_BRANCH }}
  TARGET_GITOPS_BRANCH:
    description: "Target environment for branch name of GitOps"
    value: ${{ steps.target-gitops-branch.outputs.TARGET_GITOPS_BRANCH }}
  # git
  TIMESTAMP:
    description: "Tag: yymmdd-HHMMSS"
    value: ${{ steps.timestamp.outputs.TIMESTAMP }}
  TIME_TAG:
    description: "Tag: vers_yymmdd-HHMMSS"
    value: ${{ steps.time-tag.outputs.TIME_TAG }}
  HASH_TAG:
    description: "Tag: vers_HASHED"
    value: ${{ steps.hash-tag.outputs.HASH_TAG }}

runs:
  using: composite
  steps:
    - name: üèÉ [EXTRACT/REPO] Check inputs
      shell: bash
      run: |
        cat <<EOF
        üîé working-directory : ${{ inputs.working-directory }}
        EOF

    # ========================================
    # // app
    # ========================================
    - name: üèÉ [EXTRACT/REPO] app-name
      id: app-name
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        TRIMMED_APP_NAME=$(cat settings.gradle.kts | grep 'rootProject.name' | awk -F '"' '{print $2}')
        APP_NAME=$(echo ${TRIMMED_APP_NAME} | tr '[:upper:]' '[:lower:]')
        echo "> '${TRIMMED_APP_NAME}' => '${APP_NAME}'"
        echo "::set-output name=APP_NAME::${APP_NAME}"

    - name: üèÉ [EXTRACT/REPO] app-vers
      id: app-vers
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        FIRST_GREPPED_APP_VERS=$(cat gradle-ci.properties | grep "appVersion" | tr -d ' ' | head -n 1)
        TRIMMED_APP_VERS=$(echo ${FIRST_GREPPED_APP_VERS} | awk -F '=' '{print $2}')
        echo "> '${FIRST_GREPPED_APP_VERS}' => '${TRIMMED_APP_VERS}'"
        echo "::set-output name=APP_VERS::${TRIMMED_APP_VERS}"

    # ========================================
    # // git
    # ========================================
    - name: üèÉ [EXTRACT/REPO] git-branch_sha
      id: git-branch_sha
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        SHORTEN_SHA=$(git rev-parse --short HEAD)
        echo "> SHORTEN_SHA: ${SHORTEN_SHA}"
        echo "::set-output name=GIT_BRANCH_SHA::${SHORTEN_SHA}"

    - name: üèÉ [EXTRACT/REPO] git-branch
      id: git-branch
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        THIS_BRANCH=$(git branch --show-current | awk -F "/" '{print $1}')
        [ -z ${THIS_BRANCH} ] && {
            echo "> 'THIS_BRANCH' is emtpy. Use '${{ github.ref_name }}' to replace."
            THIS_BRANCH=${{ github.ref_name }}
        }
        [ ${{ env.ACT }} ] && [ ${MOCK_BRANCH} ] && {
            THIS_BRANCH=${MOCK_BRANCH}
            echo "> THIS_BRANCH: ${THIS_BRANCH} (override for ACT in local)"
        }
        echo "::set-output name=GIT_BRANCH::${THIS_BRANCH}"

    - name: üèÉ [EXTRACT/REPO] target-gitops-branch
      id: target-gitops-branch
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        THIS_BRANCH="${{ steps.git-branch.outputs.GIT_BRANCH }}"
        [[ ${THIS_BRANCH} = release* ]] && {
            TARGET="dev"
            echo "üîé ${THIS_BRANCH} is mathed to '${TARGET}' branch"
            echo "::set-output name=TARGET_GITOPS_BRANCH::${TARGET}"
            exit 0
        }

        [[ ${THIS_BRANCH} = v* ]] ||
        [[ ${THIS_BRANCH} = hotfix* ]] && {
            TARGET="beta"
            echo "üîé ${THIS_BRANCH} is mathed to '${TARGET}' branch"
            echo "::set-output name=TARGET_GITOPS_BRANCH::${TARGET}"
            exit 0
        }

        DUMMY_TARGET="non-pushing"
        echo "No matching pattern to '${THIS_BRANCH}'! 'TARGET_GITOPS_BRANCH' name set '${DUMMY_TARGET}'.."
        echo "::set-output name=TARGET_GITOPS_BRANCH::${DUMMY_TARGET}"

    # ========================================
    # // tag
    # ========================================
    - name: üèÉ [EXTRACT/REPO] timestamp
      id: timestamp
      shell: bash
      run: |
        export TZ="Asia/Seoul"
        echo "::set-output name=TIMESTAMP::$(date '+%y%m%d-%H%M%S')"

    - name: üèÉ [EXTRACT/REPO] time-tag
      id: time-tag
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        TIME_TAG="${{ steps.timestamp.outputs.TIMESTAMP }}"
        echo "> TIME_TAG: ${TIME_TAG}"
        echo "::set-output name=TIME_TAG::${TIME_TAG}"

    - name: üèÉ [EXTRACT/REPO] hash-tag
      id: hash-tag
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        HASH_TAG="${{ steps.git-branch_sha.outputs.GIT_BRANCH_SHA }}"
        echo "> HASH_TAG: ${HASH_TAG}"
        echo "::set-output name=HASH_TAG::${HASH_TAG}"
